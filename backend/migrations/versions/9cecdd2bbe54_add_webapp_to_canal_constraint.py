"""Add webApp to canal constraint

Revision ID: 9cecdd2bbe54
Revises: 20250125_user_security_fields
Create Date: 2025-09-27 08:53:40.360943

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "9cecdd2bbe54"
down_revision = "20250125_user_security_fields"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        "ix_budget_periods_monthly_unique",
        table_name="budget_periods",
        postgresql_where="((quinzena IS NULL) AND (semana IS NULL))",
    )
    op.drop_index(
        "ix_budget_periods_unique",
        table_name="budget_periods",
        postgresql_where="((quinzena IS NOT NULL) OR (semana IS NOT NULL))",
    )
    op.create_unique_constraint(
        "uq_budget_period",
        "budget_periods",
        ["budget_id", "ano", "mes", "quinzena", "semana"],
    )
    op.alter_column(
        "categories", "tipo", existing_type=sa.VARCHAR(length=10), nullable=False
    )
    op.create_index(op.f("ix_categories_id"), "categories", ["id"], unique=False)
    op.drop_index(
        "ix_commitments_lembretes",
        table_name="commitments",
        postgresql_where="((lembrete_whatsapp = true) AND ((status)::text = 'agendado'::text))",
    )
    op.drop_index(
        "ix_commitments_sincronizacao",
        table_name="commitments",
        postgresql_where="(precisa_sincronizar = true)",
    )
    op.drop_index("ix_commitments_usuario_data_status", table_name="commitments")
    op.alter_column(
        "consentimentos", "usuario_id", existing_type=sa.UUID(), nullable=False
    )
    op.alter_column(
        "consentimentos",
        "aceitou_em",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "consentimentos",
        "politica_versao",
        existing_type=sa.TEXT(),
        type_=sa.String(length=20),
        nullable=False,
    )
    op.create_index(
        op.f("ix_consentimentos_id"), "consentimentos", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_consentimentos_usuario_id"),
        "consentimentos",
        ["usuario_id"],
        unique=False,
    )
    op.drop_constraint(
        "consentimentos_usuario_id_fkey", "consentimentos", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "consentimentos", "users", ["usuario_id"], ["id"], ondelete="CASCADE"
    )
    op.create_index(
        op.f("ix_expressions_embeddings_id"),
        "expressions_embeddings",
        ["id"],
        unique=False,
    )
    op.alter_column("payments", "usuario_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("payments", "plano_id", existing_type=sa.INTEGER(), nullable=False)
    op.alter_column(
        "payments",
        "data_pagamento",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.Date(),
        existing_nullable=True,
    )
    op.alter_column(
        "payments",
        "metodo_pagamento",
        existing_type=sa.VARCHAR(length=20),
        type_=sa.String(length=50),
        existing_nullable=True,
    )
    op.alter_column(
        "payments", "status", existing_type=sa.VARCHAR(length=20), nullable=False
    )
    op.alter_column(
        "payments",
        "external_id",
        existing_type=sa.VARCHAR(length=100),
        type_=sa.String(length=255),
        existing_nullable=True,
    )
    op.alter_column(
        "payments",
        "criado_em",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.create_index(
        op.f("ix_payments_external_id"), "payments", ["external_id"], unique=False
    )
    op.create_index(op.f("ix_payments_id"), "payments", ["id"], unique=False)
    op.create_index(
        op.f("ix_payments_usuario_id"), "payments", ["usuario_id"], unique=False
    )
    op.alter_column(
        "plans",
        "nome",
        existing_type=sa.VARCHAR(length=50),
        type_=sa.String(length=100),
        existing_nullable=False,
    )
    op.drop_constraint("plans_nome_key", "plans", type_="unique")
    op.create_index(op.f("ix_plans_id"), "plans", ["id"], unique=False)
    op.drop_column("plans", "descricao")
    op.drop_column("plans", "tem_relatorios_avancados")
    op.drop_column("plans", "tem_receitas")
    op.drop_column("plans", "tem_orcamento")
    op.alter_column(
        "transactions", "usuario_id", existing_type=sa.UUID(), nullable=False
    )
    op.alter_column(
        "transactions",
        "mensagem_original",
        existing_type=sa.TEXT(),
        type_=sa.String(),
        existing_nullable=False,
    )
    op.alter_column(
        "transactions",
        "descricao",
        existing_type=sa.VARCHAR(length=50),
        type_=sa.String(length=200),
        existing_nullable=False,
    )
    op.alter_column(
        "transactions", "tipo", existing_type=sa.VARCHAR(length=10), nullable=False
    )
    op.alter_column(
        "transactions",
        "data_registro",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.create_index(op.f("ix_transactions_id"), "transactions", ["id"], unique=False)
    op.create_index(
        op.f("ix_transactions_usuario_id"), "transactions", ["usuario_id"], unique=False
    )
    op.drop_constraint(
        "user_google_auth_usuario_id_key", "user_google_auth", type_="unique"
    )
    op.drop_index("ix_user_google_auth_usuario_id", table_name="user_google_auth")
    op.create_index(
        op.f("ix_user_google_auth_usuario_id"),
        "user_google_auth",
        ["usuario_id"],
        unique=True,
    )
    op.alter_column(
        "users",
        "data_inicio",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "users",
        "last_password_change",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "users",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index("ix_users_email_verification_token", table_name="users")
    op.drop_index("ix_users_is_active", table_name="users")
    op.drop_index("ix_users_password_reset_token", table_name="users")
    op.drop_constraint("users_email_key", "users", type_="unique")
    op.drop_constraint("users_telefone_key", "users", type_="unique")
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_index(op.f("ix_users_telefone"), "users", ["telefone"], unique=True)
    op.drop_column("users", "status_pagamento")
    op.drop_column("users", "token")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "users", sa.Column("token", sa.UUID(), autoincrement=False, nullable=True)
    )
    op.add_column(
        "users",
        sa.Column(
            "status_pagamento",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_index(op.f("ix_users_telefone"), table_name="users")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.create_unique_constraint("users_telefone_key", "users", ["telefone"])
    op.create_unique_constraint("users_email_key", "users", ["email"])
    op.create_index(
        "ix_users_password_reset_token", "users", ["password_reset_token"], unique=False
    )
    op.create_index("ix_users_is_active", "users", ["is_active"], unique=False)
    op.create_index(
        "ix_users_email_verification_token",
        "users",
        ["email_verification_token"],
        unique=False,
    )
    op.alter_column(
        "users",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "users",
        "last_password_change",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "users",
        "data_inicio",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_index(op.f("ix_user_google_auth_usuario_id"), table_name="user_google_auth")
    op.create_index(
        "ix_user_google_auth_usuario_id",
        "user_google_auth",
        ["usuario_id"],
        unique=False,
    )
    op.create_unique_constraint(
        "user_google_auth_usuario_id_key", "user_google_auth", ["usuario_id"]
    )
    op.drop_index(op.f("ix_transactions_usuario_id"), table_name="transactions")
    op.drop_index(op.f("ix_transactions_id"), table_name="transactions")
    op.alter_column(
        "transactions",
        "data_registro",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "transactions", "tipo", existing_type=sa.VARCHAR(length=10), nullable=True
    )
    op.alter_column(
        "transactions",
        "descricao",
        existing_type=sa.String(length=200),
        type_=sa.VARCHAR(length=50),
        existing_nullable=False,
    )
    op.alter_column(
        "transactions",
        "mensagem_original",
        existing_type=sa.String(),
        type_=sa.TEXT(),
        existing_nullable=False,
    )
    op.alter_column(
        "transactions", "usuario_id", existing_type=sa.UUID(), nullable=True
    )
    op.add_column(
        "plans",
        sa.Column(
            "tem_orcamento",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "plans",
        sa.Column(
            "tem_receitas",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "plans",
        sa.Column(
            "tem_relatorios_avancados",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "plans", sa.Column("descricao", sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.drop_index(op.f("ix_plans_id"), table_name="plans")
    op.create_unique_constraint("plans_nome_key", "plans", ["nome"])
    op.alter_column(
        "plans",
        "nome",
        existing_type=sa.String(length=100),
        type_=sa.VARCHAR(length=50),
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_payments_usuario_id"), table_name="payments")
    op.drop_index(op.f("ix_payments_id"), table_name="payments")
    op.drop_index(op.f("ix_payments_external_id"), table_name="payments")
    op.alter_column(
        "payments",
        "criado_em",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "payments",
        "external_id",
        existing_type=sa.String(length=255),
        type_=sa.VARCHAR(length=100),
        existing_nullable=True,
    )
    op.alter_column(
        "payments", "status", existing_type=sa.VARCHAR(length=20), nullable=True
    )
    op.alter_column(
        "payments",
        "metodo_pagamento",
        existing_type=sa.String(length=50),
        type_=sa.VARCHAR(length=20),
        existing_nullable=True,
    )
    op.alter_column(
        "payments",
        "data_pagamento",
        existing_type=sa.Date(),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
    )
    op.alter_column("payments", "plano_id", existing_type=sa.INTEGER(), nullable=True)
    op.alter_column("payments", "usuario_id", existing_type=sa.UUID(), nullable=True)
    op.drop_index(
        op.f("ix_expressions_embeddings_id"), table_name="expressions_embeddings"
    )
    op.drop_constraint(None, "consentimentos", type_="foreignkey")
    op.create_foreign_key(
        "consentimentos_usuario_id_fkey",
        "consentimentos",
        "users",
        ["usuario_id"],
        ["id"],
    )
    op.drop_index(op.f("ix_consentimentos_usuario_id"), table_name="consentimentos")
    op.drop_index(op.f("ix_consentimentos_id"), table_name="consentimentos")
    op.alter_column(
        "consentimentos",
        "politica_versao",
        existing_type=sa.String(length=20),
        type_=sa.TEXT(),
        nullable=True,
    )
    op.alter_column(
        "consentimentos",
        "aceitou_em",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "consentimentos", "usuario_id", existing_type=sa.UUID(), nullable=True
    )
    op.create_index(
        "ix_commitments_usuario_data_status",
        "commitments",
        ["usuario_id", "data_inicio", "status"],
        unique=False,
    )
    op.create_index(
        "ix_commitments_sincronizacao",
        "commitments",
        ["precisa_sincronizar", "usuario_id"],
        unique=False,
        postgresql_where="(precisa_sincronizar = true)",
    )
    op.create_index(
        "ix_commitments_lembretes",
        "commitments",
        ["data_inicio", "lembrete_whatsapp", "status"],
        unique=False,
        postgresql_where="((lembrete_whatsapp = true) AND ((status)::text = 'agendado'::text))",
    )
    op.drop_index(op.f("ix_categories_id"), table_name="categories")
    op.alter_column(
        "categories", "tipo", existing_type=sa.VARCHAR(length=10), nullable=True
    )
    op.drop_constraint("uq_budget_period", "budget_periods", type_="unique")
    op.create_index(
        "ix_budget_periods_unique",
        "budget_periods",
        ["budget_id", "ano", "mes", "quinzena", "semana"],
        unique=True,
        postgresql_where="((quinzena IS NOT NULL) OR (semana IS NOT NULL))",
    )
    op.create_index(
        "ix_budget_periods_monthly_unique",
        "budget_periods",
        ["budget_id", "ano", "mes"],
        unique=True,
        postgresql_where="((quinzena IS NULL) AND (semana IS NULL))",
    )
    # ### end Alembic commands ###
