{
  "name": "ZapGastos",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "send_message",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -4500,
        -600
      ],
      "id": "1158d8c7-8558-4712-a997-642b3134d2ad",
      "name": "Webhook",
      "webhookId": "43c7c0a6-ed45-4396-bb5f-c156c201663d"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://evolution.zapgastos.com.br/message/sendText/ZapGastos",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "16292D45B219-4996-B831-820C25C58B46"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"({{ \n                        ($('Webhook').item.json.body.data.id || \n                         $('Webhook').item.json.body.data.key.remoteJid).split(\"@\")[0] \n                        }}\",\n    \"text\": \"Você ainda não tem cadastro no ZapGastos, cadastre se agora e aproveite nossos serviços. Mais informações em www.zapgastos.com.br\"\n  }\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4200,
        -600
      ],
      "id": "8bac1908-b8f0-4274-8a92-8b0e5ce9cb56",
      "name": "HTTP Request4"
    },
    {
      "parameters": {
        "content": "Conferencia de cadastro\n",
        "height": 580,
        "width": 600
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4200,
        -760
      ],
      "id": "cc9ffc87-42fa-4c0f-af1f-1b98c0d415c4",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "Recebimento de Mensagem\n",
        "height": 580,
        "width": 150,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4380,
        -760
      ],
      "id": "3b35805e-6dd4-486c-b9ac-291f95235049",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "63b8951a-a71d-424e-aec5-d691ed80fcf0",
              "leftValue": "={{ $json.id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "5ac77fb6-7fde-4f51-8bd7-6c062ac871bd",
              "leftValue": "",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4200,
        -400
      ],
      "id": "d57f476e-2053-4120-8647-9561b425e80d",
      "name": "IF cadastro",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "content": "Processamento de dado IA\n",
        "height": 280,
        "width": 420,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2460,
        -760
      ],
      "id": "2ee3d39c-9ede-4c7c-9028-f060290ab403",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "Desmembramento ação\n",
        "height": 280,
        "width": 420,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1020,
        -780
      ],
      "id": "3d9661cc-ea94-4079-ab70-4aee200eea85",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "Inserção e envio de OK\n",
        "height": 440,
        "width": 800,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -540,
        -920
      ],
      "id": "7ca6a870-1941-4579-9820-052083bda561",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "Geração de Relatorio e envio",
        "height": 360,
        "width": 1100,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -700,
        -420
      ],
      "id": "75083c14-42d0-4e26-bacd-32339dcdbd9c",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "jsCode": "const entrada = JSON.parse($input.first().json.message.content)\n\nconst usuario = $('consult_user').first().json.telefone\nconst categoria = entrada.categoria || null;\nconst de = entrada.de;\nconst ate = entrada.ate;\n\n// 🔍 Query RESUMO com JOIN\nlet query_resumo = `\nSELECT SUM(t.valor) AS total, MIN('${de}') AS de, MAX('${ate}') AS ate\nFROM transactions t\nLEFT JOIN categories c ON c.id = t.categoria_id\nWHERE t.data_transacao BETWEEN '${de}' AND '${ate}'\nAND t.usuario_id = '${$('consult_user').first().json.id}'\n`;\n\nif (categoria) {\n  query_resumo += `AND unaccent(c.nome) ILIKE unaccent('%${categoria}%') `;\n}\nquery_resumo += `;`;\n\n// 🔍 Query DETALHADA com JOIN\nlet query_detalhada = `\nSELECT \n  t.id,\n  t.valor,\n  t.tipo,\n  t.descricao,\n  t.data_transacao,\n  COALESCE(c.nome, 'Sem categoria') AS categoria\nFROM transactions t\nLEFT JOIN categories c ON c.id = t.categoria_id\nWHERE t.data_transacao BETWEEN '${de}' AND '${ate}'\nAND t.usuario_id = '${$('consult_user').first().json.id}'\n`;\n\nif (categoria) {\n  query_detalhada += `AND unaccent(c.nome) ILIKE unaccent('%${categoria}%') `;\n}\nquery_detalhada += `ORDER BY t.data_transacao DESC;`;\n\n// 🔁 Retorno\nreturn [\n  {\n    tipo: \"resumo\",\n    query: query_resumo,\n    periodo: { tipo: entrada.periodo?.tipo || 'personalizado', de, ate },\n    filtro: { categoria },\n    telefone_origem: usuario,\n    mensagem_original: entrada.mensagem_original\n  },\n  {\n    tipo: \"detalhado\",\n    query: query_detalhada,\n    periodo: { tipo: entrada.periodo?.tipo || 'personalizado', de, ate },\n    filtro: { categoria },\n    telefone_origem: usuario,\n    mensagem_original: entrada.mensagem_original\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1000,
        200
      ],
      "id": "51e1be87-c9e6-41ef-bf7e-d7a4d3464447",
      "name": "generate_query_report"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nconst total = parseFloat(items[0].json.total || 0).toFixed(2).replace('.', ',');\nconst transacoes = items.slice(1);\n\nconst entrada = $input.first().json;\n\nconst de = new Date($input.first().json.de || new Date()).toLocaleDateString('pt-BR');\nconst ate = new Date($input.first().json.ate || new Date()).toLocaleDateString('pt-BR');\n\nconst intervalo = de === ate ? de : `${de} até ${ate}`;\n\nlet corpo = `📊 *Relatório Financeiro*\\n\\n🗓 Período: ${intervalo}\\n\\n💰 Total gasto: R$ ${total}\\n\\n🧾 *Transações:*\\n`;\n\n// Função para mapear categoria → emoji\nfunction emojiCategoria(cat) {\n  const mapa = {\n    \"alimentação\": \"🥗\",\n    \"transporte\": \"🚗\",\n    \"casa\": \"🏠\",\n    \"saúde\": \"💊\",\n    \"lazer\": \"🎉\",\n    \"assinatura\": \"📺\",\n    \"educação\": \"📚\",\n    \"compras\": \"🛍️\",\n    \"mercado\": \"🛒\",\n    \"outros\": \"🧾\"\n  };\n  return mapa[cat?.toLowerCase()] || \"📌\";\n}\n\n// Monta as linhas\ntransacoes\n  .filter(item => parseFloat(item.json.valor || 0) > 0)\n  .forEach((item, index) => {\n    const valor = parseFloat(item.json.valor).toFixed(2).replace('.', ',');\n    const categoria = item.json.categoria || 'sem categoria';\n    const descricao = item.json.descricao?.trim() || 'sem descrição';\n    const emoji = emojiCategoria(categoria);\n\n    corpo += `${index + 1}. ${emoji} ${categoria} - ${descricao} → R$ ${valor}\\n`;\n  });\n\nreturn [{\n  json: {\n    number: $('Switch1').first().json.telefone_origem,\n    mensagem: corpo.trim()\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -700,
        200
      ],
      "id": "df0409dc-883e-43c9-bdf4-5e2428afa398",
      "name": "generate_report"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://evolution.zapgastos.com.br/message/sendText/ZapGastos",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "16292D45B219-4996-B831-820C25C58B46"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"{{ $json.number }}\",\n    \"text\": {{ JSON.stringify($json.mensagem) }}\n  }\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -400,
        200
      ],
      "id": "f25f8856-2fb5-4439-996c-42124bb8ca56",
      "name": "send_report"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://evolution.zapgastos.com.br/message/sendText/ZapGastos",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "16292D45B219-4996-B831-820C25C58B46"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"{{ $json.number }}\",\n    \"text\": {{JSON.stringify( $json.text) }}\n  }\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1000,
        -200
      ],
      "id": "6b20eb4e-e055-494b-a536-62f3203173f8",
      "name": "send_confirm_expanse"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://evolution.zapgastos.com.br/message/sendText/ZapGastos",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "16292D45B219-4996-B831-820C25C58B46"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number\": \"{{ \n                        ($('Webhook').item.json.body.data.id || \n                         $('Webhook').item.json.body.data.key.remoteJid).split(\"@\")[0] \n                        }}\",\n    \"text\": \"Despesa: Despesa não adicionada,tente novamente, se o erro persistir, contate suporte\"\n  }\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        800,
        500
      ],
      "id": "cec5f0a3-e99e-400c-80c6-37dc06a4c5a3",
      "name": "send_error"
    },
    {
      "parameters": {
        "jsCode": "const dados = $('Merge').first().json;\n\nconst numero = dados.telefone;\n\nconst mensagem = `💳 *Transação registrada com sucesso!*\n\n📝 *Descrição:* ${dados.descricao}\n💵 *Valor:* R$ ${parseFloat(dados.valor).toFixed(2)}\n📂 *Categoria:* ${dados.mensagem}\n📊 *Tipo:* ${dados.tipo}\n\n✅ Sua ${dados.tipo} foi salva no ZapGastos!`;\n\nreturn [{\n  json: {\n    number: numero,\n    text: mensagem\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        -200
      ],
      "id": "15fb7e0c-bd90-4040-a353-53595e9265e5",
      "name": "Code"
    },
    {
      "parameters": {
        "content": "Conversão de audio",
        "height": 480,
        "width": 560
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3320,
        -440
      ],
      "id": "0e04a491-10c3-4239-8d6c-eb8de75994d5",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "Definição tipo de mensagem",
        "height": 280
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3580,
        -600
      ],
      "id": "3dee8a95-06a8-4bd9-bbd7-ff770aaf2ffc",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "conversation",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "5e623904-46c2-474a-bd63-7ece6617e75c"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c35267d9-cd24-4c52-b021-216e6b4f58c5",
                    "leftValue": "={{ $('Webhook').item.json.body.data.messageType }}",
                    "rightValue": "audioMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "allMatchingOutputs": false
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2900,
        1000
      ],
      "id": "4aa2ddd6-c7bf-4a16-8498-ca86f65c444c",
      "name": "Switch",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5d2df610-9bda-428e-beeb-31ee961b9961",
              "name": "mensagem",
              "value": "={{ $('Webhook').item.json.body.data.message.conversation }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3000,
        200
      ],
      "id": "7e5ea707-f264-4017-97c2-9858928fc328",
      "name": "Mensagem de texto"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2a07f9bc-4e3f-4856-a93f-a270729dec7c",
              "name": "mensagem",
              "value": "={{ $json.mensagem }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2700,
        200
      ],
      "id": "fc5d44db-f11b-4b48-a10b-691c9e4ff15c",
      "name": "Mapeamento mensagem"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://evolution.zapgastos.com.br/chat/getBase64FromMediaMessage/ZapGastos",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Webhook').item.json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"message\": {\n    \"key\": {\n      \"id\": \"{{ $('Webhook').item.json.body.data.key.id }}\"\n    }\n  },\n  \"convertToMp4\": false\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2900,
        1200
      ],
      "id": "0a769afb-c597-4a6e-988a-64b663a7a409",
      "name": "ConverteAudio1"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "base64",
        "options": {
          "mimeType": "audio/mpeg"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -3500,
        1400
      ],
      "id": "19757a9a-32f5-4aa5-9fcd-a546226ee3e9",
      "name": "ConverteAudio2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/audio/transcriptions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "whisper-1"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            },
            {
              "name": "response_format",
              "value": "verbose_json"
            },
            {
              "name": "language",
              "value": "pt"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3200,
        1400
      ],
      "id": "fdafb500-4b18-45a3-acae-573d07984b26",
      "name": "ConverteAudio3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f6a19992-121e-4a6f-b292-3bacd756c669",
              "name": "mensagem",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2900,
        1400
      ],
      "id": "8c470835-4beb-40fe-87a8-d62889359171",
      "name": "Mensagem Audio"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.tipo }}",
                    "rightValue": "resumo",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "82320ccf-a8dc-4506-8b52-4cbae3ab34e9"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f5eaa487-4afa-415d-ad81-7202c16482f4",
                    "leftValue": "={{ $json.tipo }}",
                    "rightValue": "detalhado",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1000,
        1200
      ],
      "id": "dfff7019-ced8-4731-ad53-50fea13598ab",
      "name": "Switch1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -700,
        1200
      ],
      "id": "83a03b96-ca17-43ac-b7c9-b49fa69989c4",
      "name": "Merge1"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "categories",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "nome",
              "condition": "ilike",
              "keyValue": "=*{{ $json.categoria }}*"
            },
            {
              "keyName": "tipo",
              "condition": "ilike",
              "keyValue": "={{ $json.tipo }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -400,
        600
      ],
      "id": "24b4913b-72a9-4f35-a133-6f27418e7111",
      "name": "get_categories",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "pEqq82qbbdtqf9Qh",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "action": "generate",
        "dataPropertyName": "UUID"
      },
      "type": "n8n-nodes-base.crypto",
      "typeVersion": 1,
      "position": [
        -1000,
        800
      ],
      "id": "a1825230-9968-4b84-b310-accc9d1c2e9f",
      "name": "Crypto"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -700,
        800
      ],
      "id": "c22cd769-3dbe-4e26-953a-a1eae20c0bcd",
      "name": "Merge"
    },
    {
      "parameters": {
        "tableId": "transactions",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "usuario_id",
              "fieldValue": "={{ $('consult_user').item.json.id }}"
            },
            {
              "fieldId": "id",
              "fieldValue": "={{ $json.UUID }}"
            },
            {
              "fieldId": "mensagem_original",
              "fieldValue": "={{ $json.mensagem_original }}"
            },
            {
              "fieldId": "valor",
              "fieldValue": "={{ $json.valor }}"
            },
            {
              "fieldId": "descricao",
              "fieldValue": "={{ $json.descricao }}"
            },
            {
              "fieldId": "tipo",
              "fieldValue": "={{ $json.tipo }}"
            },
            {
              "fieldId": "canal",
              "fieldValue": "={{ $('Webhook').item.json.body.data.messageType }}"
            },
            {
              "fieldId": "categoria_id",
              "fieldValue": "={{ $json.categories_id }}"
            },
            {
              "fieldId": "data_transacao",
              "fieldValue": "={{ $json.data }}"
            },
            {
              "fieldId": "data_registro",
              "fieldValue": "={{ $now }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -400,
        800
      ],
      "id": "88359367-44f1-451a-bcaa-b30a8e179b6e",
      "name": "insert_transactions",
      "credentials": {
        "supabaseApi": {
          "id": "pEqq82qbbdtqf9Qh",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "users",
        "filters": {
          "conditions": [
            {
              "keyName": "telefone",
              "keyValue": "={{                          ($('Webhook').item.json.body.data.id ||                           $('Webhook').item.json.body.data.key.remoteJid).split(\"@\")[0]                          }}"
            },
            {
              "keyName": "status_pagamento",
              "keyValue": "ativo"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -4500,
        1400
      ],
      "id": "469cc0a7-f60c-4843-949b-a9f9c6e4b886",
      "name": "consult_user",
      "credentials": {
        "supabaseApi": {
          "id": "pEqq82qbbdtqf9Qh",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "Defina na mensagem se ela é inserção ou relatorio (intencao), se ela é despesa ou receita (tipo), e qual a categoria e retorne um json\n",
              "role": "system"
            },
            {
              "content": "={{ $json.mensagem }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -2700,
        1000
      ],
      "id": "af1322ba-6b89-4b42-99fc-63d0e1c1e120",
      "name": "Message a model",
      "credentials": {
        "openAiApi": {
          "id": "UJh6idi8lkh9sxaR",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "load",
        "tableName": {
          "__rl": true,
          "value": "expressions_embeddings",
          "mode": "list",
          "cachedResultName": "expressions_embeddings"
        },
        "prompt": "={{ $json.msg_normalizada }}",
        "topK": 1,
        "options": {
          "queryName": "match_documents"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        -2400,
        1000
      ],
      "id": "4017c2c1-6b5c-4b54-ae70-1ea50fd3c5c1",
      "name": "Supabase Vector Store",
      "notesInFlow": false,
      "credentials": {
        "supabaseApi": {
          "id": "pEqq82qbbdtqf9Qh",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        -3000,
        1200
      ],
      "id": "f07349d4-5474-4749-8964-27386085c53f",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "UJh6idi8lkh9sxaR",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "\nfor (const item of $input.all()) {\n  item.json.msg_normalizada = item.json.mensagem.replace(/\\d+(,\\d+)?/g, \"[VALOR]\");\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2700,
        1200
      ],
      "id": "f89ae5ed-a4a3-4692-95b3-e52f1127ece7",
      "name": "Code1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.score }}",
                    "rightValue": 0.9,
                    "operator": {
                      "type": "number",
                      "operation": "gte"
                    },
                    "id": "daf37e20-01f9-4871-8992-daedeb6e448e"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ec74b949-4bec-4463-8741-0c50985745bb",
                    "leftValue": "={{ $json.score }}",
                    "rightValue": 0.9,
                    "operator": {
                      "type": "number",
                      "operation": "lt"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2400,
        1200
      ],
      "id": "a97e2e71-bb0a-469c-a810-8d1de196bfec",
      "name": "Switch2"
    },
    {
      "parameters": {
        "mode": "chooseBranch",
        "useDataOfInput": 2
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -3000,
        1400
      ],
      "id": "da253021-c67c-4d86-822c-ea6747e9ba6b",
      "name": "Merge2"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.intencao }}",
                    "rightValue": "insercao",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "c544486c-8606-4c15-bee6-449b911fcb17"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "64eaa0a1-19b1-488f-99a0-a4ee8fd8a1ba",
                    "leftValue": "={{ $json.intencao }}",
                    "rightValue": "relatorio",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2700,
        1400
      ],
      "id": "1e533e52-4d46-4db1-8ca7-fd94c1c76fae",
      "name": "Switch3"
    },
    {
      "parameters": {
        "jsCode": "return  JSON.parse($input.first().json.message.content)"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2400,
        1400
      ],
      "id": "8bbcad2f-85dd-4600-a1fc-fc66a8be119f",
      "name": "Code2"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "=Defina pela mensagem o valor inserido, a descrição e os, resposta em json {valor, descricao}",
              "role": "system"
            },
            {
              "content": "={{ $('Mapeamento mensagem').item.json.mensagem }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -3000,
        1600
      ],
      "id": "87552f4b-67ee-4791-8eeb-709175bbd014",
      "name": "Message a model1",
      "credentials": {
        "openAiApi": {
          "id": "UJh6idi8lkh9sxaR",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "=Defina pela mensagem o periodo(de e ate), a categoria (categoria) se nao estiver implicita, deixe em branco,  se é despesa ou receita (tipo)\nDevolva Json com, categoria, de e ate (periodo), tipo\nagora: {{ $now }}",
              "role": "system"
            },
            {
              "content": "={{ $('Mapeamento mensagem').item.json.mensagem }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -2700,
        1600
      ],
      "id": "052793f8-072b-43ce-b237-82fbf35a64f6",
      "name": "Message a model2",
      "credentials": {
        "openAiApi": {
          "id": "UJh6idi8lkh9sxaR",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "\n\n\n// O retorno bruto da IA vem como texto (ex: $json.text ou $json.output)\nconst resultado = JSON.parse($input.first().json.message.content)\n\nconst valorFormatado = resultado.valor?.toFixed(2).replace(',', '.');\n\n\nreturn [ {\n  intencao: $('Switch3').first().json.intencao,\n  tipo: $('Switch3').first().json.tipo,\n  categoria: $('Switch3').first().json.categoria,\n  descricao: resultado.descricao || '',\n  valor: parseFloat(valorFormatado),\n  data: resultado.data || $today,\n  mensagem_original: $('Mapeamento mensagem').first().json.mensagem,\n  canal: $('Webhook').first().json.body.data.messageType,\n  telefone: $('consult_user').first().json.telefone\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2400,
        1600
      ],
      "id": "0a58aa41-6231-426b-975e-88079f78e1c4",
      "name": "Code3"
    },
    {
      "parameters": {
        "jsCode": "let id;\nconst item = $input.first().json;\nconst quantidadeColunas = Object.keys(item).length;\nif ($('Code3').first().json.tipo == 'despesa') {\n  id = 20;\n} else {\n  id = 30;\n}\n\nif (quantidadeColunas === 0) {\n  return [{ json: { categories_id: id, mensagem: 'Outros' } }];\n}\nreturn [{ json: { categories_id: $input.first().json.id, mensagem: $input.first().json.nome } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1000,
        1800
      ],
      "id": "1994c6f3-a44a-4be5-b029-d8444ef916fe",
      "name": "Code4"
    },
    {
      "parameters": {
        "mode": "chooseBranch",
        "useDataOfInput": 2
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -2700,
        1800
      ],
      "id": "f0eaddfc-dd39-4241-beb8-f58cca2c14ce",
      "name": "Merge3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.query }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -400,
        2400
      ],
      "id": "2dde9234-522d-4524-a744-fb1afb72ca27",
      "name": "Execute a SQL query",
      "credentials": {
        "postgres": {
          "id": "tGhPFtJ7sstjWPds",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.query }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1000,
        2600
      ],
      "id": "760fa444-a37d-4fb8-b792-98f41d84f684",
      "name": "Execute a SQL query1",
      "credentials": {
        "postgres": {
          "id": "tGhPFtJ7sstjWPds",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n\"intencao\": \"{{ $json.document.metadata.intencao }}\",\n\"tipo\": \"{{ $json.document.metadata.tipo }}\",\n\"categoria\": \"{{ $json.document.metadata.categoria }}\"\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2700,
        2000
      ],
      "id": "2bd09ab9-7c6f-45bf-9bd6-0ca424979533",
      "name": "Edit Fields"
    }
  ],
  "pinData": {
    "send_error": [
      {
        "json": {
          "key": {
            "remoteJid": "5521999839393@s.whatsapp.net",
            "fromMe": true,
            "id": "3EB0339A61806B97BC6C09261782C7795D529E96"
          },
          "pushName": "",
          "status": "PENDING",
          "message": {
            "conversation": "Despesa: Despesa não adicionada,tente novamente, se o erro persistir, contate suporte"
          },
          "contextInfo": null,
          "messageType": "conversation",
          "messageTimestamp": 1753299128,
          "instanceId": "831e18af-44a0-4e46-b359-7e6ea03f0bb7",
          "source": "unknown"
        }
      }
    ],
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n.zapgastos.com.br",
            "user-agent": "axios/1.7.9",
            "content-length": "994",
            "accept-encoding": "gzip, compress, deflate, br",
            "content-type": "application/json",
            "x-forwarded-for": "18.224.65.57",
            "x-forwarded-host": "n8n.zapgastos.com.br",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "d060451b74d5",
            "x-real-ip": "18.224.65.57"
          },
          "params": {},
          "query": {},
          "body": {
            "event": "messages.upsert",
            "instance": "ZapGastos",
            "data": {
              "key": {
                "remoteJid": "5521999839393@s.whatsapp.net",
                "fromMe": false,
                "id": "3EB0E0CF7F1A83C3FED885"
              },
              "pushName": "Guilherme Sá",
              "status": "DELIVERY_ACK",
              "message": {
                "conversation": "qual foi minha despesa com Compras Presenciais esse mês?",
                "messageContextInfo": {
                  "deviceListMetadata": {
                    "senderKeyHash": "HIGIQOZPaBU4HA==",
                    "senderTimestamp": "1752936697",
                    "senderAccountType": "E2EE",
                    "receiverAccountType": "E2EE",
                    "recipientKeyHash": "zXAH3FXnjDSXfg==",
                    "recipientTimestamp": "1752689357"
                  },
                  "deviceListMetadataVersion": 2,
                  "messageSecret": "ogA/OaqAmvbqr6GCeeoLlkwNWBKL907csGm4og/CpqE="
                }
              },
              "messageType": "conversation",
              "messageTimestamp": 1753303119,
              "instanceId": "831e18af-44a0-4e46-b359-7e6ea03f0bb7",
              "source": "web"
            },
            "destination": "https://n8n.zapgastos.com.br/webhook/send_message",
            "date_time": "2025-07-23T17:38:39.197Z",
            "sender": "5521971270342@s.whatsapp.net",
            "server_url": "https://evolution.zapgastos.com.br",
            "apikey": "16292D45B219-4996-B831-820C25C58B46"
          },
          "webhookUrl": "https://n8n.zapgastos.com.br/webhook/send_message",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "consult_user",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF cadastro": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate_query_report": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate_report": {
      "main": [
        [
          {
            "node": "send_report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send_confirm_expanse": {
      "main": [
        []
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "send_confirm_expanse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Mensagem de texto",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "ConverteAudio1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mensagem de texto": {
      "main": [
        [
          {
            "node": "Mapeamento mensagem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mapeamento mensagem": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ConverteAudio1": {
      "main": [
        [
          {
            "node": "ConverteAudio2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ConverteAudio2": {
      "main": [
        [
          {
            "node": "ConverteAudio3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ConverteAudio3": {
      "main": [
        [
          {
            "node": "Mensagem Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mensagem Audio": {
      "main": [
        [
          {
            "node": "Mapeamento mensagem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Execute a SQL query",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute a SQL query1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "generate_report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_categories": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Crypto": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "insert_transactions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "insert_transactions": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "consult_user": {
      "main": [
        [
          {
            "node": "IF cadastro",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Switch3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Switch3": {
      "main": [
        [
          {
            "node": "Message a model1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model1": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "get_categories",
            "type": "main",
            "index": 0
          },
          {
            "node": "Crypto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Message a model2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model2": {
      "main": [
        [
          {
            "node": "generate_query_report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        []
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "56d60d7b-9654-4bf4-9b69-6fc1d312b7ca",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "98062e769af090faae5619eb079769b8704b3e6c0500762cc10426505101dd1f"
  },
  "id": "o0pQ5FkQDjNIfS38",
  "tags": []
}